#!/usr/bin/env python
"""
Copyright (c) 2014, Eindhoven University of Technology

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of this project nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 Authors: Sven Goossens
"""


import argparse
import os
import xml.etree.ElementTree as ET


def parseArguments():
    parser = argparse.ArgumentParser(description='Interpret CPLEX result xml')
    parser.add_argument('--xml', dest='xml', required=True, type=str, help='xml file to parse')
    return parser.parse_args()


def getRoot(xmlFile):
    if not os.path.exists(xmlFile):
        raise Exception('Failed to open xml file.')
    with open(xmlFile, 'r') as f:
        try:
            tree = ET.parse(f)
        except:
            print('Failed to parse pattern xml file.')
            raise
        root = tree.getroot()
        return root


def getVarsFromRoot(root):
    elems = root.findall(".//variable")
    assert len(elems) >= 1
    return elems


def parseCplexSolFile(xml):
    """
    Parse the .sol file generated by CPLEX.
    Args:
       xml (str):  The path to the CPLEX .sol file (Which contains xml).
    """
    root = getRoot(xml)
    vars = getVarsFromRoot(root)
    cmdCycs = []
    for var in vars:
        name = var.attrib['name']
        val = var.attrib['value']
        if float(val) > 0.5:
            # Interpret anything > 0.5 as a binary 1.
            # This is used to be more relevant in an earlier incarnation of the ILP formulation,
            # where some variables were still continuous rather than binary.
            cmdCyc = name.split('_')
            if len(cmdCyc) != 3:
                continue
            cmdCycs.append((int(cmdCyc[1]), cmdCyc[0]))
    cmdCycs = sorted(cmdCycs, key=lambda c: c[0])

    # Find the length of the pattern
    firstA0 = 1
    pattLen = 0
    for cmd in cmdCycs:
        if cmd[1] == 'A0':
            if firstA0:
                firstA0 = 0
            else:
                pattLen = cmd[0]
    return cmdCycs, pattLen


def main(args):
    cmdCycs = parseCplexSolFile(args.xml)
    print(cmdCycs)

if __name__ == '__main__':
    args = parseArguments()
    main(args)
